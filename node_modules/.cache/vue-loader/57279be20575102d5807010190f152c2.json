{"remainingRequest":"/home/maik/Schreibtisch/birkenfeld-lokale-unternehmen/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/maik/Schreibtisch/birkenfeld-lokale-unternehmen/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/maik/Schreibtisch/birkenfeld-lokale-unternehmen/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/maik/Schreibtisch/birkenfeld-lokale-unternehmen/src/views/Datenschutz.vue?vue&type=template&id=3f3059ce&","dependencies":[{"path":"/home/maik/Schreibtisch/birkenfeld-lokale-unternehmen/src/views/Datenschutz.vue","mtime":1586188676050},{"path":"/home/maik/Schreibtisch/birkenfeld-lokale-unternehmen/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/maik/Schreibtisch/birkenfeld-lokale-unternehmen/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/maik/Schreibtisch/birkenfeld-lokale-unternehmen/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/maik/Schreibtisch/birkenfeld-lokale-unternehmen/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}